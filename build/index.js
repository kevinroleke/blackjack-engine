!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["blackjack-engine"]=t():e["blackjack-engine"]=t()}(this,(function(){return function(e){var t={};function r(a){if(t[a])return t[a].exports;var n=t[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,a){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(a,n,function(t){return e[t]}.bind(null,n));return a},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(e,t){e.exports=function(e){function t(a){if(r[a])return r[a].exports;var n=r[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,t),n.l=!0,n.exports}var r={};return t.m=e,t.c=r,t.i=function(e){return e},t.d=function(e,r,a){t.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:a})},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=0)}({"./src/index.js":function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=t.isNull=function(e){return null===e},a=t.isUndefined=function(e){return void 0===e},n=t.isNullOrUndef=function(e){return a(e)||r(e)},s=t.cardName=function(e){if(n(e))throw Error("Invalid number");return 1===e?"A":11===e?"J":12===e?"Q":13===e?"K":e.toString()},i=t.suiteName=function(e){switch(e.toLowerCase()){case"♥":case"h":case"heart":case"hearts":return"hearts";case"♦":case"d":case"diamond":case"diamonds":return"diamonds";case"♣":case"c":case"club":case"clubs":return"clubs";case"♠":case"s":case"spade":case"spades":return"spades";default:throw Error("invalid suite")}},o=t.suiteColor=function(e){switch(e){case"hearts":case"diamonds":return"R";case"clubs":case"spades":return"B";default:throw Error("invalid suite")}},c=t.cardValue=function(e){return 10>e?e:10},d=t.makeCard=function(e,t){var r=i(t);return{text:s(e),suite:r,value:c(e),color:o(r)}},l=(t.newDecks=function(e){for(var t=[],r=0;r<e;r++)t=l().concat(t);return t},t.newDeck=function(){return[].concat.apply([],["hearts","diamonds","clubs","spades"].map((function(e){return[1,2,3,4,5,6,7,8,9,10,11,12,13].map((function(t){return d(t,e)}))})))}),u=t.getRandom=function(e){return Math.floor(Math.random()*e)},h=(t.shuffle=function(e){for(var t,r,a=e.slice(0),n=a.length;0!==n;)r=u(n),t=a[n-=1],a[n]=a[r],a[r]=t;return a},t.serializeCard=function(e){var t,r=e.match(/\d/g),a=0,n="";if(r&&0<r.length?(a=+r.join(""),n=e.replace(a.toString(),"")):["j","q","k"].forEach((function(r,s){(0<=e.indexOf(r)||0<=e.indexOf(r.toUpperCase()))&&(a=11+s,t=r,n=e.replace(t,"").replace(t.toUpperCase(),""))})),0===a)throw Error("");return n=n.replace("-",""),d(a,n)});t.serializeCards=function(e){if(""===e)throw Error("value should contains a valid raw card/s definition");return e.trim().split(" ").map(h)}},0:function(e,t,r){e.exports=r("./src/index.js")}})},function(e,t,r){"use strict";r.r(t),r.d(t,"constants",(function(){return a})),r.d(t,"engine",(function(){return n})),r.d(t,"presets",(function(){return s})),r.d(t,"actions",(function(){return i})),r.d(t,"Game",(function(){return Ae}));var a={};r.r(a),r.d(a,"INVALID",(function(){return o})),r.d(a,"RESTORE",(function(){return c})),r.d(a,"DEAL",(function(){return d})),r.d(a,"INSURANCE",(function(){return l})),r.d(a,"SPLIT",(function(){return u})),r.d(a,"HIT",(function(){return h})),r.d(a,"DOUBLE",(function(){return f})),r.d(a,"STAND",(function(){return p})),r.d(a,"SURRENDER",(function(){return y})),r.d(a,"SHOWDOWN",(function(){return g})),r.d(a,"DEALER_HIT",(function(){return b})),r.d(a,"RIGHT",(function(){return E})),r.d(a,"LEFT",(function(){return v})),r.d(a,"STAGE_READY",(function(){return S})),r.d(a,"STAGE_PLAYER_TURN_RIGHT",(function(){return A})),r.d(a,"STAGE_PLAYER_TURN_LEFT",(function(){return O})),r.d(a,"STAGE_SHOWDOWN",(function(){return m})),r.d(a,"STAGE_DEALER_TURN",(function(){return I})),r.d(a,"STAGE_DONE",(function(){return T}));var n={};r.r(n),r.d(n,"isNull",(function(){return _})),r.d(n,"isUndefined",(function(){return w})),r.d(n,"isNullOrUndef",(function(){return j})),r.d(n,"calculate",(function(){return k})),r.d(n,"getHigherValidValue",(function(){return H})),r.d(n,"checkForBusted",(function(){return P})),r.d(n,"isBlackjack",(function(){return D})),r.d(n,"isSoftHand",(function(){return R})),r.d(n,"isSuited",(function(){return N})),r.d(n,"countCards",(function(){return C})),r.d(n,"getHandInfoInit",(function(){return B})),r.d(n,"getHandInfoAfterDeal",(function(){return L})),r.d(n,"getHandInfoAfterSplit",(function(){return x})),r.d(n,"getHandInfoAfterHit",(function(){return U})),r.d(n,"getHandInfoAfterDouble",(function(){return G})),r.d(n,"getHandInfoAfterStand",(function(){return W})),r.d(n,"getHandInfoAfterSurrender",(function(){return $})),r.d(n,"getHandInfoAfterAceSplit",(function(){return F})),r.d(n,"canDouble",(function(){return M})),r.d(n,"isLuckyLucky",(function(){return V})),r.d(n,"getTwentyOnePlusThreeMultiplier",(function(){return K})),r.d(n,"isTwentyOnePlusThree",(function(){return Q})),r.d(n,"getLuckyLuckyMultiplier",(function(){return q})),r.d(n,"isPerfectPairs",(function(){return X})),r.d(n,"getSideBetsInfo",(function(){return Z})),r.d(n,"checkActionAllowed",(function(){return ee})),r.d(n,"getPrize",(function(){return te})),r.d(n,"getPlayersWithPrizes",(function(){return re}));var s={};r.r(s),r.d(s,"getDefaultSideBets",(function(){return ne})),r.d(s,"getDefaultRules",(function(){return se})),r.d(s,"defaultPlayer",(function(){return ie})),r.d(s,"defaultState",(function(){return oe}));var i={};r.r(i),r.d(i,"invalid",(function(){return ce})),r.d(i,"restore",(function(){return de})),r.d(i,"bet",(function(){return le})),r.d(i,"dealCards",(function(){return ue})),r.d(i,"insurance",(function(){return he})),r.d(i,"split",(function(){return fe})),r.d(i,"hit",(function(){return pe})),r.d(i,"double",(function(){return ye})),r.d(i,"stand",(function(){return ge})),r.d(i,"surrender",(function(){return be})),r.d(i,"showdown",(function(){return Ee})),r.d(i,"dealerHit",(function(){return ve}));const o="INVALID",c="RESTORE",d="DEAL",l="INSURANCE",u="SPLIT",h="HIT",f="DOUBLE",p="STAND",y="SURRENDER",g="SHOWDOWN",b="DEALER-HIT",E="right",v="left",S="ready",A="player-turn-right",O="player-turn-left",m="showdown",I="dealer-turn",T="done";const _=e=>null===e,w=e=>void 0===e,j=e=>w(e)||_(e),k=e=>{if(1===e.length){if(j(e[0]))return{hi:0,lo:0};const t=e[0].value;return{hi:1===t?11:t,lo:1===t?1:t}}const t=[],r=e.reduce((e,r)=>1===r.value?(t.push(1),e):e+=r.value,0);return t.reduce(e=>(e.hi+11<=21?(e.hi+=11,e.lo+=1):(e.hi+=1,e.lo+=1),e.hi>21&&e.lo<=21&&(e.hi=e.lo),e),{hi:r,lo:r})},H=e=>e.hi<=21?e.hi:e.lo,P=e=>e.hi>21&&e.lo===e.hi,D=e=>2===e.length&&21===k(e).hi,R=e=>e.some(e=>1===e.value)&&17===e.reduce((e,t)=>e+=1===t.value&&e<11?11:t.value,0),N=(e=[])=>{if(0===e.length)return!1;const t=e[0].suite;return e.every(e=>e.suite===t)},C=e=>{const t=[-1,1,1,1,1,1,0,0,0,-1,-1,-1,-1];return e.reduce((e,r)=>e+=t[r.value-1],0)},B=(e,t,r=!1)=>{const a=k(e);if(!a)throw Error(e+" cards don't have value");const n=D(e)&&!1===r,s=P(a),i=s||n||21===a.hi;return{bet:0,cards:e,playerValue:a,playerHasBlackjack:n,playerHasBusted:s,playerHasSurrendered:!1,close:i,availableActions:{double:!i&&!0,split:e.length>1&&e[0].value===e[1].value&&!i,insurance:1===t[0].value&&!i,hit:!i,stand:!i,surrender:!i}}},L=(e,t,r)=>{const a=B(e,t);a.bet=r;const n=a.availableActions;return a.availableActions=Object.assign(Object.assign({},n),{stand:!0,hit:!0,surrender:!0}),Object.assign(Object.assign({},a),{close:a.playerHasBlackjack})},x=(e,t,r,a)=>{const n=B(e,t,!0),s=n.availableActions,i=k(e);if(!i)throw Error(e+" cards don't have value");const o=D(e),c=P(i)||o||21===i.hi,d=e.length>1&&e[0].value===e[1].value&&!c&&!a;return n.availableActions=Object.assign(Object.assign({},s),{split:d,double:!n.close&&2===e.length,insurance:!1,surrender:!1}),n.bet=r,n},U=(e,t,r,a)=>{const n=B(e,t,a),s=n.availableActions;return n.availableActions=Object.assign(Object.assign({},s),{double:2===e.length,split:!1,insurance:!1,surrender:!1}),n.bet=r,n},G=(e,t,r,a)=>{const n=U(e,t,r,a),s=n.availableActions;return n.availableActions=Object.assign(Object.assign({},s),{hit:!1,stand:!1}),n.bet=2*r,Object.assign(Object.assign({},n),{close:!0})},W=e=>Object.assign(Object.assign({},e),{close:!0,availableActions:{double:!1,split:!1,insurance:!1,hit:!1,stand:!1,surrender:!1}}),$=e=>{const t=W(e);return Object.assign(Object.assign({},t),{playerHasSurrendered:!0,close:!0})},F=(e,t,r)=>{const a=B(e,t,!0),n=a.availableActions;for(const e in a.availableActions)n[e]=!1;return a.bet=r,a.close=!0,a},M=(e,t)=>"none"!==e&&("9or10"===e?9===t.hi||10===t.hi:"9or10or11"===e?t.hi>=9&&t.hi<=11:"9thru15"!==e||t.hi>=9&&t.hi<=15),V=(e,t)=>{const r=k(e).hi+k(t).hi,a=k(e).lo+k(t).lo,n=k(e).hi+k(t).lo,s=k(e).lo+k(t).hi;return r>=19&&r<=21||a>=19&&a<=21||n>=19&&n<=21||s>=19&&s<=21},Y=e=>{const t=["A","2","3","4","5","6","7","8","9","10","J","Q","K"];let r=[];for(const a of e)r.push(t.indexOf(a.text));for(let e=0;e<r.length;e++){0==r[e]&&-1!=r.indexOf(t.length-1)&&(r[e]=t.length)}r.sort((e,t)=>e-t);const a=r[0]==r[1]-1&&r[1]-1==r[2]-2;return a&&console.log(e.map(e=>e.text).join(" "),"is straight"),a},z=e=>{const t=e[0].suite;for(const r of e)if(r.suite!=t)return!1;return console.log(e.map(e=>e.suite).join(" "),"is flush"),!0},J=e=>{const t=e[0].text;for(const r of e)if(r.text!=t)return!1;return console.log(e.map(e=>e.text).join(" "),"is trips"),!0},K=(e,t)=>{const r=[e[0],e[1],t[0]];return z(r)&&J(r)?100:z(r)&&Y(r)?40:J(r)?25:Y(r)?10:z(r)?5:0},Q=(e,t)=>K(e,t)>0,q=(e,t)=>{const r=[...e,...t],a=N(r);return((e,t,r)=>{const a=`${e}${t?"s":""}`;return"777s"===a?200:"678s"===a?100:"777"===a?50:"678"===a?30:21!==r.hi&&21!==r.lo||!t?21!==r.hi&&21!==r.lo||t?20===r.hi||20===r.lo?3:19===r.hi||19===r.lo?2:0:3:10})(r.map(e=>e.value).join(""),a,k(r))},X=e=>e[0].value===e[1].value,Z=(e,t,r,a)=>{const n={luckyLucky:0,perfectPairs:0,twentyOnePlusThree:0};if(e.luckyLucky&&t.luckyLucky&&V(r,a)){const e=q(r,a);n.luckyLucky=t.luckyLucky*e}if(e.perfectPairs&&t.perfectPairs&&X(r)&&(n.perfectPairs=5*t.perfectPairs),console.log(e.twentyOnePlusThree,t.twentyOnePlusThree),e.twentyOnePlusThree&&t.twentyOnePlusThree&&Q(r,a)){const e=K(r,a);n.twentyOnePlusThree=t.twentyOnePlusThree*e}return n},ee=(e,t)=>{const r=t.stage.name;switch(r){case"STAGE_READY":{if(!e.payload)throw Error("No action payload");const{bet:r,playerId:a}=e.payload;if(void 0===r||void 0===a)throw Error("Omitted 'bet' or 'playerId' params from the action payload");t.players[a];return["BET"].indexOf(e.type)>-1}case"STAGE_DEAL_CARDS":return["DEAL-CARDS"].indexOf(e.type)>-1;case"STAGE_INSURANCE":{if(!e.payload)throw Error("No action payload");const{bet:r,playerId:a}=e.payload;if(void 0===r||void 0===a)throw Error("Omitted 'bet' or 'playerId' params from the action payload");if(!t.rules.insurance)throw new Error("Not allowed stage, because of the set rules");return["INSURANCE"].indexOf(e.type)>-1}case"STAGE_PLAYERS_TURN":{if(void 0===t.stage.activePlayerId||void 0===t.stage.activeHandId)throw new Error("'activePlayerId' and/or 'activeHandId' haven't been set in state");const a=t.stage.activePlayerId,n=t.stage.activeHandId,s=t.players[t.stage.activePlayerId],i=s.hands[t.stage.activeHandId];if(i.close)throw new Error(`${e.type} is not allowed because "${n}" hand of player ${a} is closed on "${r}"`);if(s.hands.slice(0,t.stage.activeHandId).some(e=>!e.close))throw new Error(`${e.type} is not allowed on hand ${n} for user ${a} because you need to finish a hand before`);if(!i.availableActions[e.type.toLowerCase()])throw new Error(`${e.type} is not currently allowed on hand "${n}". Stage is "${r}"`);return[p,y,u,h,f].indexOf(e.type)>-1}case g:return[g,p].indexOf(e.type)>-1;case I:return[b].indexOf(e.type)>-1;default:return!1}},te=(e,t)=>{const{playerHasSurrendered:r=!0,playerHasBlackjack:a=!1,playerHasBusted:n=!0,playerValue:s={hi:0,lo:0},bet:i=0}=e,o=H(k(t)),c=D(t);if(n)return 0;if(r)return i/2;if(a&&!c)return i+1.5*i;if(o>21)return i+i;const d=H(s);return d>o?i+i:d===o?i:0},re=(e,t)=>{const r=[...e];for(const e of r)for(const r of e.hands)e.finalWin+=te(r,t);return r};var ae=r(0);const ne=(e=!0)=>({luckyLucky:e,perfectPairs:e,royalMatch:e,luckyLadies:e,inBet:e,MatchTheDealer:e,twentyOnePlusThree:e}),se=()=>({decks:1,standOnSoft17:!0,double:"any",split:!0,doubleAfterSplit:!0,surrender:!0,insurance:!0,showdownAfterAceSplit:!0,maxHandNumber:4}),ie=(e="player-0")=>({name:e,initialBet:0,finalBet:0,finalWin:0,sideBetsFromUser:{luckyLucky:0,twentyOnePlusThree:0,perfectPairs:0},sideBetWins:{luckyLucky:0,twentyOnePlusThree:0,perfectPairs:0},hands:[]}),oe=e=>({players:[ie()],stage:{name:"STAGE_READY"},deck:Object(ae.shuffle)(Object(ae.newDecks)(e.decks)),availableBets:ne(!1),rules:e,dealerHoleCard:null,dealerHasBlackjack:!1,dealerHasBusted:!1,dealerCards:[],dealerValue:{hi:0,lo:0},cardCount:0,history:[]}),ce=(e,t)=>({type:"INVALID",payload:{type:e.type,payload:e.payload,info:t}}),de=()=>({type:"RESTORE"}),le=({bet:e=10,playerId:t,sideBets:r={luckyLucky:0,twentyOnePlusThree:0,perfectPairs:0}})=>({type:"BET",payload:{bet:e,sideBets:r,playerId:t}}),ue=()=>({type:"DEAL-CARDS"}),he=({bet:e=0,playerId:t})=>({type:"INSURANCE",payload:{bet:e,playerId:t}}),fe=()=>({type:"SPLIT"}),pe=()=>({type:"HIT"}),ye=()=>({type:"DOUBLE"}),ge=()=>({type:"STAND"}),be=()=>({type:"SURRENDER"}),Ee=()=>({type:"SHOWDOWN"}),ve=e=>({type:"DEALER-HIT",payload:{dealerHoleCard:e}}),Se=e=>{const t={ts:(new Date).getTime()};return Object.assign(Object.assign({},t),{action:e})};class Ae{constructor(e,t=se()){this.state=e?Object.assign({},e):oe(t),this.dispatch=this.dispatch.bind(this),this.getState=this.getState.bind(this),this.setState=this.setState.bind(this),this.enforceRules=this.enforceRules.bind(this),this._dispatch=this._dispatch.bind(this),this._drawCard=this._drawCard.bind(this)}enforceRules(e){const{availableActions:t,playerValue:r}=e,{rules:a,history:n}=this.state;return M(a.double,r)||(t.double=!1),a.split||(t.split=!1),a.surrender||(t.surrender=!1),a.doubleAfterSplit||n.some(e=>e.action.type===u)&&(t.double=!1),a.insurance||(t.insurance=!1),e}getState(){return Object.assign({},this.state)}setState(e){this.state=Object.assign(Object.assign({},this.state),e)}dispatch(e){try{return ee(e,this.getState())?this._dispatch(e):this._dispatch(ce(e,`${e.type} is not allowed when stage is ${this.state.stage}`))}catch(t){return this._dispatch(ce(e,t.message))}}getActivePlayer(){const{activePlayerId:e,activeHandId:t}=this.state.stage;if(void 0===e||void 0===t)throw Error('"playerId" or "handId" are omitted from the stage when getting Active Player');return{activePlayerId:e,activeHandId:t}}_dispatch(e){switch(e.type){case"BET":{if(void 0===e.payload)throw Error("Payload is omitted");const{bet:t,playerId:r,sideBets:a}=e.payload;if(void 0===t||void 0===r)throw Error('"bet" or "playerId" are omitted from the payload');let n=this.state.players;const s=n[r];s.initialBet=t,n[r]=s,a&&(s.sideBetsFromUser=a);let i={name:"STAGE_READY"};n.every(e=>e.initialBet>0||e.initialBet===1/0)&&(i={name:"STAGE_DEAL_CARDS"}),this.state.history.push(Se(e)),this.state=Object.assign(Object.assign({},this.state),{stage:i,players:n}),"STAGE_DEAL_CARDS"===i.name&&this._dispatch(ue());break}case"DEAL-CARDS":{const{availableBets:e,deck:t,players:r}=this.state,a={};for(const e of r)a[e.name]=[this._drawCard()];const n=[this._drawCard()];for(const e of this.state.players)a[e.name].push(this._drawCard());const s=this._drawCard(),i=k(n);let o=D(n.concat([s]));for(const t of r){const{sideBetsFromUser:r,initialBet:i}=t,o=a[t.name],c=this.enforceRules(L(o,n,i));c.playerHasBlackjack&&(c.close=!0),t.hands=[c],t.sideBetWins=Object.assign(Object.assign({},t.sideBetWins),Z(e,r,o,n.concat([s])))}let c=r.findIndex(e=>!e.hands[0].playerHasBlackjack),d={name:"STAGE_PLAYERS_TURN",activePlayerId:c,activeHandId:0};if(1===n[0].value&&(d={name:"STAGE_INSURANCE"}),this.state.history.push(Se({type:"DEAL-CARDS"})),this.state=Object.assign(Object.assign({},this.state),{players:r,deck:t,stage:d,dealerCards:n,dealerHoleCard:s,dealerValue:i,dealerHasBlackjack:o,availableBets:ne(!1)}),-1===c){this._dispatch(Ee());break}break}case"INSURANCE":{if(void 0===e.payload)throw Error("Payload is omitted");const{bet:t,playerId:r}=e.payload;if(void 0===t||void 0===r)throw Error('"bet" or "playerId" are omitted from the payload');const a=this.state.players[r];if(void 0!==a.sideBetWins.insurance)throw Error(`Player '${a.name}' already make insurance decision`);if(t>a.initialBet/2)throw Error("\"bet\" can't be higher than the half of the player's initial Bet");const{dealerCards:n,dealerHoleCard:s,history:i}=this.state;let o=n;s&&(o=n.concat([s]));const c=D(o),d=t>0?t:0,l=1===o[0].value&&c&&d>0&&t>0?2*d:0;a.hands.forEach(e=>e.availableActions.insurance=!1),a.sideBetWins=Object.assign(Object.assign({},a.sideBetWins),{insurance:{risk:d,win:l}});const u=Se({type:"INSURANCE",payload:{playerId:r}});this.state.history=i.concat(u);const h=this._getStageFromInsuranceStage();this.state.stage=h,"STAGE_SHOWDOWN"===h.name&&this._dispatch(Ee());break}case"SPLIT":{const{activePlayerId:e,activeHandId:t}=this.getActivePlayer(),r=this.state.players[e],{initialBet:a,hands:n}=r;let s=n[t];const{rules:i,dealerCards:o,history:c}=this.state,d=[s.cards[0]],l=[s.cards[1]],u=i.showdownAfterAceSplit&&1===d[0].value,h=n.length>=i.maxHandNumber-1;s=this.enforceRules(x(l,o,a,h));let f=this.enforceRules(x(d,o,a,h));l.push(this._drawCard()),d.push(this._drawCard()),u&&(s=this.enforceRules(F(l,o,a)),f=this.enforceRules(F(d,o,a))),r.hands[t]=s,r.hands.push(f),this.state.players[e]=r;const p=this._getStageFromPlayerTurn(e),y=Se({type:"SPLIT",payload:{playerId:e,handId:t}});this.state.stage=p,this.state.history=c.concat(y),"STAGE_SHOWDOWN"===p.name&&this._dispatch(Ee());break}case"HIT":{const{activePlayerId:e,activeHandId:t}=this.state.stage;if(void 0===e||void 0===t)throw Error('"playerId" or "handId" are omitted from the stage');const r=this.state.players[e];let a=r.hands[t];const{initialBet:n}=r,{dealerCards:s,history:i}=this.state,o=this._drawCard();a.cards.push(o),a=U(a.cards,s,n,!a.availableActions.split),r.hands[t]=a;const c=this._getStageFromPlayerTurn(e),d=Se({type:"HIT",payload:{playerId:e,handId:t}});this.state=Object.assign(Object.assign({},this.state),{stage:c,history:i.concat(d)}),"STAGE_SHOWDOWN"===c.name&&this._dispatch(Ee());break}case"DOUBLE":{const{activePlayerId:e,activeHandId:t}=this.getActivePlayer(),r=this.state.players[e];let a=r.hands[t];const{initialBet:n}=r,{dealerCards:s,history:i}=this.state,o=this._drawCard();a.cards.push(o),a=G(a.cards,s,n,!a.availableActions.split),r.hands[t]=a;const c=Se({type:"DOUBLE",payload:{playerId:e,handId:t}});this.state=Object.assign(Object.assign({},this.state),{history:i.concat(c)}),this._dispatch(ge());break}case"STAND":{const{activePlayerId:e,activeHandId:t}=this.getActivePlayer(),r=this.state.players[e];let a=r.hands[t];a=W(a),r.hands[t]=a;const{history:n}=this.state,s=Se({type:"STAND",payload:{playerId:e,handId:t}});this.state.history=n.concat(s);const i=this._getStageFromPlayerTurn(e);this.state.stage=i,"STAGE_SHOWDOWN"===i.name&&this._dispatch(Ee());break}case"SHOWDOWN":{const{dealerHoleCard:t,history:r,players:a}=this.state;if(null==t)throw new Error("Dealer hole card not set at showdown");const n=Se(e);if(this.state.stage={name:"STAGE_DEALER_TURN"},this.state.history=r.concat(n),this._dispatch(ve(t)),a.every(e=>e.hands.every(e=>e.playerHasBusted||e.playerHasBlackjack||e.playerHasSurrendered))){this.state=Object.assign(Object.assign({},this.state),{stage:{name:"STAGE_DONE"},players:re(this.state.players,this.state.dealerCards)});break}for(;"STAGE_DEALER_TURN"===this.state.stage.name;)this._dispatch(ve());this.state=Object.assign(Object.assign({},this.state),{stage:{name:"STAGE_DONE"},players:re(this.state.players,this.state.dealerCards)});break}case"SURRENDER":{const{activePlayerId:e}=this.getActivePlayer(),t=this.state.players[e];let r=t.hands[0];if(t.hands.length>1)throw Error("Many hands at surrender");const{history:a}=this.state;r=$(r),t.hands[0]=r;const n=Se({type:"STAND",payload:{playerId:e}}),s=this._getStageFromPlayerTurn(e);this.state=Object.assign(Object.assign({},this.state),{stage:s,history:a.concat(n)}),"STAGE_SHOWDOWN"===s.name&&this._dispatch(Ee());break}case"DEALER-HIT":{const{rules:t,history:r}=this.state,a=(e.payload&&e.payload.dealerHoleCard?e.payload.dealerHoleCard:null)||this._drawCard(),n=this.state.dealerCards.concat([a]),s=k(n),i=D(n),o=s.hi>21;let c={name:"STAGE_DEALER_TURN"};s.hi>=17&&(t.standOnSoft17&&R(n)||!R(n))&&(c={name:"STAGE_DONE"}),s.lo>=17&&(c={name:"STAGE_DONE"});const d=Se(e);this.state=Object.assign(Object.assign({},this.state),{stage:c,dealerCards:n,dealerValue:s,dealerHasBlackjack:i,dealerHasBusted:o,history:r.concat(d)});break}default:{const{history:t}=this.state,r=Se(e);this.state.history=t.concat(r);break}}return this.getState()}_drawCard(){const e=this.state.deck.pop();if(null==e)throw Error("No more cards in the deck");return this.state.cardCount+=C([e]),e}_getStageFromInsuranceStage(){const{players:e}=this.state;return e.some(e=>void 0===e.sideBetWins.insurance)?{name:"STAGE_INSURANCE"}:this._getStageFromPlayerTurn(0)}_getStageFromPlayerTurn(e){const{players:t}=this.state;let r=e,a=0,n=!1;for(;!n&&r<t.length;){const e=t[r];for(const[t,r]of e.hands.entries())if(!r.close){a=t,n=!0;break}n||r++}return n&&r!==t.length?{name:"STAGE_PLAYERS_TURN",activePlayerId:r,activeHandId:a}:{name:"STAGE_SHOWDOWN"}}}}])}));